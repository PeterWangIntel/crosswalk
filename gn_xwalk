#!/usr/bin/env python

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import gc
import os
import subprocess
import sys

xwalk_dir = os.path.dirname(os.path.realpath(__file__))
chrome_src = os.path.abspath(os.path.join(xwalk_dir, os.pardir))

# Assume this file is in a one-level-deep subdirectory of the source root.
SRC_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

def generate_version_strings():
  xwalk_version = ""
  chrome_version = ""

  proc = subprocess.Popen(['python',
                           'build/util/version.py',
                           '-f',
                           'xwalk/VERSION',
                           '-t',
                           '"@MAJOR@.@MINOR@.@BUILD@.@PATCH@"'], stdout=subprocess.PIPE)
  while True:
    line = proc.stdout.readline()
    if line != '':
      xwalk_version = line.rstrip()
      break
    else:
      break

  proc = subprocess.Popen(['python',
                           'build/util/version.py',
                           '-f',
                           'chrome/VERSION',
                           '-t',
                           '"@MAJOR@.@MINOR@.@BUILD@.@PATCH@"'], stdout=subprocess.PIPE)
  while True:
    line = proc.stdout.readline()
    if line != '':
      chrome_version = line.rstrip()
      break
    else:
      break

  return (xwalk_version, chrome_version)

def generate_android_version_strings(xwalk_version, android_app_abi):
  api_version = ""
  min_api_version = ""
  xwalk_version_code = ""

  proc = subprocess.Popen(['python',
                           'build/util/version.py',
                           '-f',
                           'xwalk/API_VERSION',
                           '-t',
                           '"@API@"'], stdout=subprocess.PIPE)
  line = proc.stdout.readline()
  if line != '':
    api_version = line.rstrip()

  proc = subprocess.Popen(['python',
                           'build/util/version.py',
                           '-f',
                           'xwalk/API_VERSION',
                           '-t',
                           '"@MIN_API@"'], stdout=subprocess.PIPE)
  line = proc.stdout.readline()
  if line != '':
    min_api_version = line.rstrip()

  proc = subprocess.Popen(['python',
                           'xwalk/build/android/generate_version_code.py',
                           '--version',
                           xwalk_version,
                           '--abi-name',
                           android_app_abi], stdout=subprocess.PIPE)
  line = proc.stdout.readline()
  if line != '':
    xwalk_version_code = line.rstrip()

  return (api_version, min_api_version, xwalk_version_code)

def main():
  # Disabling garbage collection saves about 1 second out of 16 on a Linux
  # z620 workstation. Since this is a short-lived process it's not a problem to
  # leak a few cyclyc references in order to spare the CPU cycles for
  # scanning the heap.
  gc.disable()

  args = sys.argv[1:]

  xwalk_version = ""
  chrome_version = ""
  (xwalk_version, chrome_version) = generate_version_strings()

  command_line = "gn gen out/Default --args=\'"
  args += 'xwalk_version=%s chrome_version=%s ' % (xwalk_version, chrome_version)
  for arg in args:
    command_line += arg

  command_line += ' toolkit_views=false'
  command_line += ' use_aura=false'
  command_line += ' use_webui_file_picker=false'
  command_line += ' use_ozone=false'
  command_line += ' disable_nacl=true'
  command_line += ' enable_plugins=false'
  command_line += ' disable_bundled_extensions=true'
  command_line += "\'"

  subprocess.Popen([command_line], stdout=subprocess.PIPE)
  while True:
    line = proc.stdout.readline()
    if line != '':
      print line
    else:
      break

if __name__ == '__main__':
  sys.exit(main())
